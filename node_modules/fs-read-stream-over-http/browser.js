'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _require = require('stream'),
    PassThrough = _require.PassThrough;

var parseUrl = require('url').parse;
var httpGet = require('http').get;
var httpsGet = require('https').get;

var valitedateOpt = require('./validate-opt');

var fsCreateReadStream = function fsCreateReadStream(path, urlToPath, opt) {
	// todo: path may also be a `Buffer` or `require('url').URL`
	if ('string' !== typeof path) throw new Error('path must be a string.');

	if ('function' !== typeof urlToPath) {
		throw new Error('urlToPath must be a function.');
	}

	if ('string' === typeof opt) opt = { encoding: opt };else if ('object' !== (typeof opt === 'undefined' ? 'undefined' : _typeof(opt)) || Array.isArray(opt)) {
		throw new Error('opt must be an object or a string.');
	}
	opt = Object.assign({
		flags: 'r',
		encoding: null
	}, opt);
	valitedateOpt(opt);

	var out = new PassThrough({ encoding: opt.encoding });
	if (opt.encoding) out.setEncoding(opt.encoding);

	var url = urlToPath(path);

	var _parseUrl = parseUrl(url),
	    protocol = _parseUrl.protocol;

	var get = protocol === 'http:' ? httpGet : httpsGet;
	get(url, function (res) {
		if (res.statusCode < 200 || res.statusCode >= 300) {
			out.destroy(new Error(res.statusMessage || 'non-2xx HTTP status code'));
		} else {
			res.pipe(out); // todo: propagate errors
		}
	});

	return out;
};

module.exports = fsCreateReadStream;